{
    "componentChunkName": "component---src-templates-writeups-js",
    "path": "/ctf/writeups/legacy_code/README/",
    "result": {"data":{"site":{"siteMetadata":{"title":"SecHack365-Fans HomePage"}},"markdownRemark":{"id":"041302a5-509a-5913-920f-cb1a933ebcd7","excerpt":"Legacy code 解法1 プログラムの命令を全部追わなくても推測でFLAGがわかる。   まず、標準出力を回答せよという問題であることに加え、\n49行目~53行目あたりでprintf…","html":"<h1>Legacy code</h1>\n<h2>解法1</h2>\n<p>プログラムの命令を全部追わなくても推測でFLAGがわかる。  </p>\n<p>まず、標準出力を回答せよという問題であることに加え、\n49行目~53行目あたりでprintfしようとしているコードが読み取れるので、恐らくここで表示される文字列が答えになるのかなとあたりを付ける。  </p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">\tpushw\t-2(%bp)\n\tpushw\t$.LC0\n\tpushw\t%ss\n\tpopw\t%ds\n\tcall\tprintf</code></pre></div>\n<p>表示しようとしている <code class=\"language-text\">.LC0</code> には以下のように書式文字列が格納されているので、これが表示されるのだなと理解する。  </p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">.LC0:\n\t.string\t\"PC%d%.0f\\n\"</code></pre></div>\n<p><code class=\"language-text\">%d%.0f</code> に何の数字が入るかが問題である。<br>\n<code class=\"language-text\">%d</code> に入る数字は、先程見たprintf call前にある <code class=\"language-text\">pushw\t-2(%bp)</code> から <code class=\"language-text\">-2(%bp)</code> に代入されている数字が表示されるんだろうと考えコードを辿ってみると、<code class=\"language-text\">-2(%bp)</code>に値を代入しているのは14行目のここだけだと気づく。  </p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">\tmovw\t$9,\t-2(%bp)</code></pre></div>\n<p>即値で整数の9を代入しているので <code class=\"language-text\">%d</code> に表示されるのは <code class=\"language-text\">9</code> であることがわかる。<br>\nここまででフラグの文字列の頭は <code class=\"language-text\">PC9</code> であるというところまでわかる。  </p>\n<p>次に <code class=\"language-text\">%.0f</code> の部分に入る数字を考える。<br>\n浮動小数点数が入りそうだ。<br>\n尚且、浮動小数の計算を行っているのはFPUを使った以下の部分だけなので、ここの計算結果がわかれば恐らくはそれが出力されているのだろうと推測できる。  </p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">\tfinit\n\tfld\t-10(%bp)\n\tfld\t-14(%bp)\n\tfaddp\t%st(0), %st(1)\n\tfstp\t-6(%bp)\n\tfwait</code></pre></div>\n<p><code class=\"language-text\">-10(%bp)</code> と <code class=\"language-text\">-14(%bp)</code> に格納されている数字をロードし、\n<code class=\"language-text\">faddp\t%st(0), %st(1)</code> で足し合わせて、その答えを <code class=\"language-text\">fstp\t-6(%bp)</code> で <code class=\"language-text\">-6(%bp)</code> に格納していることがわかる。<br>\n計算内容(足し算をしているだけ)がわかったので、後は計算に使われている２つの値である <code class=\"language-text\">-10(%bp)</code> と <code class=\"language-text\">-14(%bp)</code> に格納されている数字がわかればほぼ勝ちである。  </p>\n<p><code class=\"language-text\">-10(%bp)</code> と <code class=\"language-text\">-14(%bp)</code> に値を代入しているのはここらへんっぽいが、なにがどういう組み合わせで入っているかわからない。(<code class=\"language-text\">movw</code>使ってるしおおよそ予想はつくかもしれないが…)</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">\tmovw\t$0x28A4, -10(%bp)\n\tmovw\t$0x4448, -8(%bp)\n\tmovw\t$0xE148, -14(%bp)\n\tmovw\t$0x3EBA, -12(%bp)</code></pre></div>\n<p>厳密に順を追って上記の値の形式を推測すると、<br>\nFPUのロード命令は <code class=\"language-text\">fld</code> が使われていることから、計算に使われている値はどちらも <code class=\"language-text\">float</code> 型であることがわかる。(<code class=\"language-text\">double</code>型の値をロードするには <code class=\"language-text\">fldl</code> 命令を使う必要がある)<br>\nよって、値は32bitで扱われているはずだ。  </p>\n<p>そしてもう一つ、ファイル先頭のアーキテクチャとコードのビット幅指定から、このアセンブリ言語プログラムは16bitマシン(Intel 80286ターゲット)で書かれていることがわかる。  </p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">\t.arch i286,jumps\n\t.code16</code></pre></div>\n<p>16bitマシンではもちろんレジスタは16bitだし、値のやり取りも最大16bitで行われていることがわかる(<code class=\"language-text\">movw</code>は16ビットのデータのmov命令なので、その時点でわかるが)。<br>\nよって以下のコードは32bitのfloat型の数字を上位16ビットと下位16bitにわけて格納している事がわかる。  </p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">\tmovw\t$0x28A4, -10(%bp)\n\tmovw\t$0x4448, -8(%bp)\n\tmovw\t$0xE148, -14(%bp)\n\tmovw\t$0x3EBA, -12(%bp)</code></pre></div>\n<p>上司に教えてもらった<a href=\"https://silight.hatenablog.jp/entry/2016/08/23/212820\">Webサイト</a>で16進数から小数表現に変換すると以下のようになります。  </p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">4448 28A4 -> 800.635009765625\n3EBA E148 -> 0.36500000953674316</code></pre></div>\n<p>これらを足し合わせると<code class=\"language-text\">801.0000097751617</code>になるが、書式文字列のフォーマット指定子は<code class=\"language-text\">%.0f</code>なので、表示されるのは<code class=\"language-text\">801</code>になる。<br>\n先にわかっていたフラグの頭と繋げると <code class=\"language-text\">PC9801</code> という文字列が標準出力されることが推測できる。  </p>\n<h2>解法2</h2>\n<p>Reversingではなくなってしますが、アセンブルしてPC-98x1実機とかエミュレータとかその他レトロマシンで実行するともちろんフラグが表示されます。(元々このコードは自宅のPC-9801 DX U2で動作させるプログラムとして書いた)  </p>\n<h1>フラグ</h1>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">TsukuCTF{PC9801}</code></pre></div>","frontmatter":{"title":"Legacy code","description":"レガシーマシンのアセンブリ言語プログラムを読み解く","author":"taisyo","genre":"Rev","solver":"7","point":"484"}}},"pageContext":{"id":"041302a5-509a-5913-920f-cb1a933ebcd7"}},
    "staticQueryHashes": ["2841359383"]}