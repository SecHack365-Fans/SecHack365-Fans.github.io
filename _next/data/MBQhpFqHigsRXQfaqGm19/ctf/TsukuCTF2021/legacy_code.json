{"pageProps":{"postData":{"id":"legacy_code","contentHtml":"# Legacy code\n\n## 解法 1\n\nプログラムの命令を全部追わなくても推測で FLAG がわかる。\n\nまず、標準出力を回答せよという問題であることに加え、\n49 行目~53 行目あたりで printf しようとしているコードが読み取れるので、恐らくここで表示される文字列が答えになるのかなとあたりを付ける。\n\n    \tpushw\t-2(%bp)\n    \tpushw\t$.LC0\n    \tpushw\t%ss\n    \tpopw\t%ds\n    \tcall\tprintf\n\n表示しようとしている `.LC0` には以下のように書式文字列が格納されているので、これが表示されるのだなと理解する。\n\n    .LC0:\n    \t.string\t\"PC%d%.0f\\n\"\n\n`%d%.0f` に何の数字が入るかが問題である。\\\n`%d` に入る数字は、先程見た printf call 前にある `pushw -2(%bp)` から `-2(%bp)` に代入されている数字が表示されるんだろうと考えコードを辿ってみると、`-2(%bp)`に値を代入しているのは 14 行目のここだけだと気づく。\n\n    \tmovw\t$9,\t-2(%bp)\n\n即値で整数の 9 を代入しているので `%d` に表示されるのは `9` であることがわかる。\\\nここまででフラグの文字列の頭は `PC9` であるというところまでわかる。\n\n次に `%.0f` の部分に入る数字を考える。\\\n浮動小数点数が入りそうだ。\\\n尚且、浮動小数の計算を行っているのは FPU を使った以下の部分だけなので、ここの計算結果がわかれば恐らくはそれが出力されているのだろうと推測できる。\n\n    \tfinit\n    \tfld\t-10(%bp)\n    \tfld\t-14(%bp)\n    \tfaddp\t%st(0), %st(1)\n    \tfstp\t-6(%bp)\n    \tfwait\n\n`-10(%bp)` と `-14(%bp)` に格納されている数字をロードし、\n`faddp %st(0), %st(1)` で足し合わせて、その答えを `fstp -6(%bp)` で `-6(%bp)` に格納していることがわかる。\\\n計算内容(足し算をしているだけ)がわかったので、後は計算に使われている２つの値である `-10(%bp)` と `-14(%bp)` に格納されている数字がわかればほぼ勝ちである。\n\n`-10(%bp)` と `-14(%bp)` に値を代入しているのはここらへんっぽいが、なにがどういう組み合わせで入っているかわからない。(`movw`使ってるしおおよそ予想はつくかもしれないが...)\n\n    \tmovw\t$0x28A4, -10(%bp)\n    \tmovw\t$0x4448, -8(%bp)\n    \tmovw\t$0xE148, -14(%bp)\n    \tmovw\t$0x3EBA, -12(%bp)\n\n厳密に順を追って上記の値の形式を推測すると、\\\nFPU のロード命令は `fld` が使われていることから、計算に使われている値はどちらも `float` 型であることがわかる。(`double`型の値をロードするには `fldl` 命令を使う必要がある)\\\nよって、値は 32bit で扱われているはずだ。\n\nそしてもう一つ、ファイル先頭のアーキテクチャとコードのビット幅指定から、このアセンブリ言語プログラムは 16bit マシン(Intel 80286 ターゲット)で書かれていることがわかる。\n\n    \t.arch i286,jumps\n    \t.code16\n\n16bit マシンではもちろんレジスタは 16bit だし、値のやり取りも最大 16bit で行われていることがわかる(`movw`は 16 ビットのデータの mov 命令なので、その時点でわかるが)。\\\nよって以下のコードは 32bit の float 型の数字を上位 16 ビットと下位 16bit にわけて格納している事がわかる。\n\n    \tmovw\t$0x28A4, -10(%bp)\n    \tmovw\t$0x4448, -8(%bp)\n    \tmovw\t$0xE148, -14(%bp)\n    \tmovw\t$0x3EBA, -12(%bp)\n\n上司に教えてもらった[Web サイト](https://silight.hatenablog.jp/entry/2016/08/23/212820)で 16 進数から小数表現に変換すると以下のようになります。\n\n    4448 28A4 -> 800.635009765625\n    3EBA E148 -> 0.36500000953674316\n\nこれらを足し合わせると`801.0000097751617`になるが、書式文字列のフォーマット指定子は`%.0f`なので、表示されるのは`801`になる。\\\n先にわかっていたフラグの頭と繋げると `PC9801` という文字列が標準出力されることが推測できる。\n\n## 解法 2\n\nReversing ではなくなってしまいますが、アセンブルして PC-98x1 実機とかエミュレータとかその他レトロマシンで実行するともちろんフラグが表示されます。(元々このコードは自宅の PC-9801 DX U2 で動作させるプログラムとして書いた)\n\n# フラグ\n\n    TsukuCTF{PC9801}\n","title":"Legacy code","description":"レガシーマシンのアセンブリ言語プログラムを読み解く","author":"T_taisyou","genre":"Rev","solver":7,"point":484}},"__N_SSG":true}