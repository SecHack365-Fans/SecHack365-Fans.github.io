{"pageProps":{"postData":{"id":"discriminate","contentHtml":"# discriminate\n\n## 想定解法 1\n\n以下のようなコードを実行します。 すると、フラグが標準出力されます。\n\n```python\nfrom transformers import T5Tokenizer, AutoModelForCausalLM\n# トークナイザー\ntokenizer = T5Tokenizer.from_pretrained(\"rinna/japanese-gpt2-medium\")\n# 生成モデル\nmodel = AutoModelForCausalLM.from_pretrained(\"rinna/japanese-gpt2-medium\")\n\n# テキストを入れると後続テキストを生成する関数\ndef gen_text(text):\n    input = tokenizer.encode(text, return_tensors=\"pt\")\n    output = model.generate(input, do_sample=False, max_length=90)\n    return tokenizer.batch_decode(output)[0].replace(\"</s>\", '').replace(\" \",'')\n\ntext = \"握るだけで解錠できるスマートドアハンドルを開発した。静脈認証が外側のドアハンドルに埋め込まれている。静脈認証は、身体の内部にある静脈パターンを読み取り、そのパターンに合致するドアハンドルを自動的に開く。スマートドアハンドルは、ドアハンドルの内側に内蔵されたセンサーが、ドアハンドルの開閉を検知して、自動的に開閉する。\"\n\nlen_text = len(text)\n# 一文字づつずらして生成する\nfor i in range(5, len_text):\n    try_text = text[:i]\n    generated_text = gen_text(try_text)\n    # 問題のテキストを与えられたテキストと一致するものか\n    if generated_text[:len_text] == text[:len_text]:\n        break\n# フラグを表示\nprint(\"TsukuCTF\\{\",text[i-5: i], \"\\}\")\n```\n\n## 想定解法 2\n\nこちらのほうが現実的です。\n\n1. https://sechack365.nict.go.jp/achievement からスマートドアハンドルの話題を扱っているポスターを探す。→[PDF](https://sechack365.nict.go.jp/achievement/2020/pdf/2020_08.pdf)\n2. ポスターを読んで与えられた生成文に近い文章を探す。\n3. 生成文とオリジナルを比較し、一致している最後の 5 文字を回答する。\n","title":"discriminate","description":"言語モデルで生成された文章の検知","author":"FQCme1","genre":"Misc","solver":25,"point":244}},"__N_SSG":true}